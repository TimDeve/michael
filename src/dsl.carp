(use Array)
(use Map)

(defmodule Sheriff
  (defmodule JSON
    (defmodule DSL
      (defn escape-string [s]
        (let [sub $[(Pair.init @#"\\" @"\\\\\\\\")
                    (Pair.init @#"\"" @"\\\\\"")
                    (Pair.init @#"'" @"\\\\'")
                    (Pair.init @#"\t" @"\\\\t")
                    (Pair.init (Pattern.init "\b") @"\\\\b")
                    (Pair.init (Pattern.init "\f") @"\\\\f")
                    (Pair.init @#"\r" @"\\\\r")
                    (Pair.init @#"\n" @"\\\\n")]]
          (StaticArray.reduce
           &(fn [acc pair]
             (Pattern.substitute (Pair.a pair) &acc (Pair.b pair) -1))
           s
           sub)))

      (deftype JsonNode [v String])

      (sig s (Fn [String] JsonNode))
      (defn s [string] (JsonNode.init (fmt "\"%s\"" &(escape-string string))))

      (sig n (Fn [Double] JsonNode))
      (defn n [double] (JsonNode.init (fmt "%.16g" double)))

      (sig b (Fn [Bool] JsonNode))
      (defn b [boolean] (JsonNode.init (Bool.str boolean)))

      (sig a (Fn [(Array JsonNode)] JsonNode))
      (defn a [arr]
        (JsonNode.init
          (fmt "[%s]" &(String.join ", " &(copy-map
                                           &(fn [n] @(JsonNode.v n))
                                           &arr)))))

      (hidden make-kv)
      (private make-kv)
      (sig make-kv (Fn [(Pair String JsonNode)] String))
      (defn make-kv [arg]
        (fmt "\"%s\": %s"
             (the (Ref String) (Pair.a arg))
             (JsonNode.v (Pair.b arg))))

      (sig o (Fn [(Map String JsonNode)] JsonNode))
      (defn o [m]
        (JsonNode.init
          (fmt "{%s}" &(==> (to-array &m)
                            (ref)
                            (copy-map &Sheriff.JSON.DSL.make-kv)
                            (ref)
                            (String.join ", ")))))

      (sig stringify (Fn [(Ref JsonNode)] String))
      (defn stringify [node] @(JsonNode.v node))

      (sig null (Fn [] JsonNode))
      (defn null [] (JsonNode.init @"null")))))
