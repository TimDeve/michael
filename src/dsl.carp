(use Array)
(use Map)

(defmodule Sheriff
  (defmodule JSON
    (deftype DSL (Node [String]))

    (defmodule DSL
      (sig stringify (Fn [Sheriff.JSON.DSL] String))
      (defn stringify [n] (match n (Sheriff.JSON.DSL.Node v) v))

      (defn escape-string [s]
        (let [sub $[(Pair.init @#"\\" @"\\\\\\\\")
                    (Pair.init (Pattern.init "\\\"") @"\\\\\"")
                    (Pair.init @#"'" @"\\\\'")
                    (Pair.init @#"\t" @"\\\\t")
                    (Pair.init (Pattern.init "\b") @"\\\\b")
                    (Pair.init (Pattern.init "\f") @"\\\\f")
                    (Pair.init @#"\r" @"\\\\r")
                    (Pair.init @#"\n" @"\\\\n")]]
          (StaticArray.reduce
           &(fn [acc pair]
             (Pattern.substitute (Pair.a pair) &acc (Pair.b pair) -1))
           s
           sub)))

      (sig s (Fn [String] Sheriff.JSON.DSL))
      (defn s [string] (Sheriff.JSON.DSL.Node (fmt "\"%s\"" &(escape-string string))))

      (sig n (Fn [Double] Sheriff.JSON.DSL))
      (defn n [double] (Sheriff.JSON.DSL.Node (fmt "%.16g" double)))

      (sig b (Fn [Bool] Sheriff.JSON.DSL))
      (defn b [boolean] (Sheriff.JSON.DSL.Node (Bool.str boolean)))

      (sig a (Fn [(Array Sheriff.JSON.DSL)] Sheriff.JSON.DSL))
      (defn a [arr]
        (Sheriff.JSON.DSL.Node
          (fmt "[%s]" &(String.join ", " &(copy-map
                                           &(fn [n] (Sheriff.JSON.DSL.stringify @n))
                                           &(the (Array Sheriff.JSON.DSL) arr))))))

      (defn- make-kv [arg]
        (fmt "\"%s\": %s"
             (the (Ref String) (Pair.a arg))
             &(Sheriff.JSON.DSL.stringify @(Pair.b arg))))

      (sig o (Fn [(Map String Sheriff.JSON.DSL)] Sheriff.JSON.DSL))
      (defn o [m]
        (Sheriff.JSON.DSL.Node
          (fmt "{%s}" &(--> (to-array &(the (Map String Sheriff.JSON.DSL) m))
                            (ref)
                            (copy-map &Sheriff.JSON.DSL.make-kv)
                            (ref)
                            (String.join ", ")))))

      (sig null (Fn [] Sheriff.JSON.DSL))
      (defn null [] (Sheriff.JSON.DSL.Node @"null")))))
